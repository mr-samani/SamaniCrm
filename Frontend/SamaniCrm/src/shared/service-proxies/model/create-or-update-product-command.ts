/**
 * SamaniCrm API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ProductFileDto } from './product-file-dto';
import { ProductImageDto } from './product-image-dto';
import { ProductAttributeValueDto } from './product-attribute-value-dto';
import { ProductPriceDto } from './product-price-dto';
import { ProductTranslationDto } from './product-translation-dto';


/**
 * SamaniCrm API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* Created with custom template */

/** Interface for CreateOrUpdateProductCommand */
export interface ICreateOrUpdateProductCommand {
  id?: string;
  tenantId?: string;
  categoryId?: string;
  productTypeId?: string;
  title?: string;
  description?: string;
  categoryTitle?: string;
  productTypeTitle?: string;
  sku: string;
  slug?: string;
  isActive?: boolean;
  createdAt?: string;
  translations?: Array<ProductTranslationDto>;
  images?: Array<ProductImageDto>;
  files?: Array<ProductFileDto>;
  prices?: Array<ProductPriceDto>;
  attributeValues?: Array<ProductAttributeValueDto>;
}

/** Class for CreateOrUpdateProductCommand */
export class CreateOrUpdateProductCommand implements ICreateOrUpdateProductCommand {
  id?: string;
  tenantId?: string;
  categoryId?: string;
  productTypeId?: string;
  title?: string;
  description?: string;
  categoryTitle?: string;
  productTypeTitle?: string;
  sku!: string;
  slug?: string;
  isActive?: boolean;
  createdAt?: string;
  translations?: Array<ProductTranslationDto>;
  images?: Array<ProductImageDto>;
  files?: Array<ProductFileDto>;
  prices?: Array<ProductPriceDto>;
  attributeValues?: Array<ProductAttributeValueDto>;

  constructor(data?: ICreateOrUpdateProductCommand) {
    if (data) {
      for (let property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

init(data?: any) {
  if (data) {
    this.id = data["id"];
    this.tenantId = data["tenantId"];
    this.categoryId = data["categoryId"];
    this.productTypeId = data["productTypeId"];
    this.title = data["title"];
    this.description = data["description"];
    this.categoryTitle = data["categoryTitle"];
    this.productTypeTitle = data["productTypeTitle"];
    this.sku = data["sku"];
    this.slug = data["slug"];
    this.isActive = data["isActive"];
    this.createdAt = data["createdAt"];
    if (Array.isArray(data["translations"])) {
      this.translations = [] as any;
      for (let item of data["translations"])
        (this.translations as any).push(ProductTranslationDto.fromJS(item));
    }
    if (Array.isArray(data["images"])) {
      this.images = [] as any;
      for (let item of data["images"])
        (this.images as any).push(ProductImageDto.fromJS(item));
    }
    if (Array.isArray(data["files"])) {
      this.files = [] as any;
      for (let item of data["files"])
        (this.files as any).push(ProductFileDto.fromJS(item));
    }
    if (Array.isArray(data["prices"])) {
      this.prices = [] as any;
      for (let item of data["prices"])
        (this.prices as any).push(ProductPriceDto.fromJS(item));
    }
    if (Array.isArray(data["attributeValues"])) {
      this.attributeValues = [] as any;
      for (let item of data["attributeValues"])
        (this.attributeValues as any).push(ProductAttributeValueDto.fromJS(item));
    }
  }
}

  static fromJS(data: any): CreateOrUpdateProductCommand {
    const instance = new CreateOrUpdateProductCommand();
    instance.init(data);
    return instance;
  }
}


