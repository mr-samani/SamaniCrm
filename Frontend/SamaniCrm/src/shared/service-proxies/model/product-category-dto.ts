/**
 * SamaniCrm API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ProductCategoryTranslationDto } from './product-category-translation-dto';
import { MenuTargetEnum } from './menu-target-enum';


/**
 * SamaniCrm API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* Created with custom template */

/** Interface for ProductCategoryDto */
export interface IProductCategoryDto {
  id?: string;
  title?: string;
  image?: string;
  slug?: string;
  orderIndex?: number;
  isActive?: boolean;
  createdAt?: string;
  parentId?: string;
  target?: MenuTargetEnum;
  children?: Array<ProductCategoryDto>;
  translations?: Array<ProductCategoryTranslationDto>;
  description?: string;
}

/** Class for ProductCategoryDto */
export class ProductCategoryDto implements IProductCategoryDto {
  id?: string;
  title?: string;
  image?: string;
  slug?: string;
  orderIndex?: number;
  isActive?: boolean;
  createdAt?: string;
  parentId?: string;
  target?: MenuTargetEnum;
  children?: Array<ProductCategoryDto>;
  translations?: Array<ProductCategoryTranslationDto>;
  description?: string;

  constructor(data?: IProductCategoryDto) {
    if (data) {
      for (let property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

init(data?: any) {
  if (data) {
    this.id = data["id"];
    this.title = data["title"];
    this.image = data["image"];
    this.slug = data["slug"];
    this.orderIndex = data["orderIndex"];
    this.isActive = data["isActive"];
    this.createdAt = data["createdAt"];
    this.parentId = data["parentId"];
    this.target = data["target"];
    if (Array.isArray(data["children"])) {
      this.children = [] as any;
      for (let item of data["children"])
        (this.children as any).push(ProductCategoryDto.fromJS(item));
    }
    if (Array.isArray(data["translations"])) {
      this.translations = [] as any;
      for (let item of data["translations"])
        (this.translations as any).push(ProductCategoryTranslationDto.fromJS(item));
    }
    this.description = data["description"];
  }
}

  static fromJS(data: any): ProductCategoryDto {
    const instance = new ProductCategoryDto();
    instance.init(data);
    return instance;
  }
}


